// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  account               String                 @unique
  password              String?                @db.VarChar(255)
  email                 String                 @unique
  isAdmin               Boolean?               @default(false)
  balance               Decimal?               @default(0.00) @db.Decimal(10, 2)
  accountFrozen         Decimal?               @default(0.00) @db.Decimal(10, 2)
  withdrawalAmount      Decimal?               @default(0.00) @db.Decimal(10, 2)
  walletAddress         String?                @db.VarChar(255)
  walletPassword        String?                @db.VarChar(255)
  pixCompellation       String?                @db.VarChar(255)
  pixAccount            String?                @db.VarChar(255)
  isActive              Boolean?               @default(false)
  inviterId             Int?
  inviterCode           Int?
  timestamp             Int?                   @default(0)
  gold                  Int?                   @default(0)
  token                 String?                @db.Text
  frozenRecords         FrozenRecord[]
  profiles              UserProfile[]
  orderRecords          OrderRecord[]
  rechargeRecords       RechargeRecord[]
  withdrawalRecords     WithdrawalRecord[]
  siginRecords          SignInRecord[]
  taskRecords           TaskRecord[]
  inviteEarningsRecords InviteEarningsRecord[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  email     String
  authCode  String
  isUse     Boolean? @default(false)
  token     String?  @db.Text
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  timestamp Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoFile {
  id        Int      @id @default(autoincrement())
  file      File?    @relation(fields: [fileId], references: [id])
  fileId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id          Int         @id @default(autoincrement())
  url         String?     @db.VarChar(255)
  size        Int?
  md5FileName String?
  name        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Zones       Zone[]
  VideoFiles  VideoFile[]
}

model Zone {
  id            Int           @id @default(autoincrement())
  title         String        @db.VarChar(255)
  cover         File?         @relation(fields: [coverId], references: [id])
  coverId       Int?
  maxFreezesNum Int           @default(0)
  probability   Int           @default(0)
  unitPrice     Decimal       @default(0.00) @db.Decimal(10, 2)
  shareProfit   Decimal       @default(0.00) @db.Decimal(10, 2)
  takes         Int           @default(0)
  introduce     String        @db.Text
  htmlIntroduce String        @db.Text
  award         Decimal       @default(0.00) @db.Decimal(10, 2)
  gold          Int           @default(0)
  orderRecords  OrderRecord[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OrderRecord {
  id                Int           @id @default(autoincrement())
  earnings          Decimal       @db.Decimal(10, 2) // 收益
  amount            Decimal       @default(0.00) @db.Decimal(10, 2)
  status            Int           @default(0) // 0 正常状态 1 冻结状态 2 正在解冻状态
  freezeExpiresTime DateTime?
  zone              Zone?         @relation(fields: [zoneId], references: [id])
  zoneId            Int?
  user              User?         @relation(fields: [userId], references: [id])
  userId            Int?
  frozenRecord      FrozenRecord? @relation(fields: [frozenRecordId], references: [id])
  frozenRecordId    Int?
  timestamp         Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model FrozenRecord {
  id           Int           @id @default(autoincrement())
  user         User?         @relation(fields: [userId], references: [id])
  userId       Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       Int           @default(0) // 0 未解冻 1 已解冻
  orderRecords OrderRecord[]
}

model RechargeRecord {
  id              Int      @id @default(autoincrement())
  user            User?    @relation(fields: [userId], references: [id])
  userId          Int?
  type            Int      @default(0)
  transactionHash String?  @default("") @db.VarChar(255)
  amount          Decimal  @db.Decimal(10, 2)
  specialAmount   Decimal  @default(0) @db.Decimal(10, 2)
  status          Int      @default(0)
  failureReasons  String?  @default("") @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model WithdrawalRecord {
  id              Int      @id @default(autoincrement())
  user            User?    @relation(fields: [userId], references: [id])
  userId          Int?
  type            Int      @default(0)
  account         String
  transactionHash String?  @default("") @db.VarChar(255)
  amount          Decimal  @db.Decimal(10, 2)
  specialAmount   Decimal  @default(0) @db.Decimal(10, 2)
  status          Int      @default(0)
  failureReasons  String?  @default("") @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model InviteEarningsRecord {
  id        Int      @id @default(autoincrement())
  inviteeId Int      @unique
  account   String
  earnings  Decimal  @default(0) @db.Decimal(10, 2)
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SignInRecord {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  timestamp Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskRecord {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  taskId    Int
  timestamp Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
