generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model File {
  id          Int         @id @default(autoincrement())
  url         String?     @db.VarChar(255)
  size        Int?
  md5FileName String?
  name        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  VideoFile   VideoFile[]
  Zone        Zone[]
}

model FrozenRecord {
  id          Int           @id @default(autoincrement())
  userId      Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  status      Int           @default(0)
  User        User?         @relation(fields: [userId], references: [id])
  OrderRecord OrderRecord[]

  @@index([userId], map: "FrozenRecord_userId_fkey")
}

model InviteEarningsRecord {
  id        Int      @id @default(autoincrement())
  inviteeId Int      @unique
  account   String
  earnings  Decimal  @default(0.00) @db.Decimal(10, 2)
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "InviteEarningsRecord_userId_fkey")
}

model OrderRecord {
  id                Int           @id @default(autoincrement())
  earnings          Decimal       @db.Decimal(10, 2)
  amount            Decimal       @default(0.00) @db.Decimal(10, 2)
  status            Int           @default(0)
  freezeExpiresTime DateTime?
  zoneId            Int?
  userId            Int?
  frozenRecordId    Int?
  timestamp         Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  FrozenRecord      FrozenRecord? @relation(fields: [frozenRecordId], references: [id])
  User              User?         @relation(fields: [userId], references: [id])
  Zone              Zone?         @relation(fields: [zoneId], references: [id])

  @@index([frozenRecordId], map: "OrderRecord_frozenRecordId_fkey")
  @@index([userId], map: "OrderRecord_userId_fkey")
  @@index([zoneId], map: "OrderRecord_zoneId_fkey")
}

model RechargeRecord {
  id              Int      @id @default(autoincrement())
  userId          Int?
  type            Int      @default(0)
  transactionHash String?  @default("") @db.VarChar(255)
  amount          Decimal  @db.Decimal(10, 2)
  specialAmount   Decimal  @default(0.00) @db.Decimal(10, 2)
  status          Int      @default(0)
  failureReasons  String?  @default("") @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  User            User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "RechargeRecord_userId_fkey")
}

model User {
  id                   Int                    @id @default(autoincrement())
  account              String                 @unique
  password             String?                @db.VarChar(255)
  email                String                 @unique
  isAdmin              Boolean?               @default(false)
  balance              Decimal?               @default(0.00) @db.Decimal(10, 2)
  accountFrozen        Decimal?               @default(0.00) @db.Decimal(10, 2)
  withdrawalAmount     Decimal?               @default(0.00) @db.Decimal(10, 2)
  walletAddress        String?                @db.VarChar(255)
  walletPassword       String?                @db.VarChar(255)
  isActive             Boolean?               @default(false)
  inviterId            Int?
  inviterCode          Int?
  timestamp            Int?                   @default(0)
  gold                 Int?                   @default(0)
  token                String?                @db.Text
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  FrozenRecord         FrozenRecord[]
  InviteEarningsRecord InviteEarningsRecord[]
  OrderRecord          OrderRecord[]
  RechargeRecord       RechargeRecord[]
  UserProfile          UserProfile[]
  WithdrawalRecord     WithdrawalRecord[]
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  email     String
  authCode  String
  isUse     Boolean? @default(false)
  token     String?  @db.Text
  userId    Int?
  timestamp Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "UserProfile_userId_fkey")
}

model VideoFile {
  id        Int      @id @default(autoincrement())
  fileId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime
  File      File?    @relation(fields: [fileId], references: [id])

  @@index([fileId], map: "VideoFile_fileId_fkey")
}

model WithdrawalRecord {
  id              Int      @id @default(autoincrement())
  userId          Int?
  type            Int      @default(0)
  account         String
  transactionHash String?  @default("") @db.VarChar(255)
  amount          Decimal  @db.Decimal(10, 2)
  specialAmount   Decimal  @default(0.00) @db.Decimal(10, 2)
  status          Int      @default(0)
  failureReasons  String?  @default("") @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  User            User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "WithdrawalRecord_userId_fkey")
}

model Zone {
  id            Int           @id @default(autoincrement())
  title         String        @db.VarChar(255)
  coverId       Int?
  maxFreezesNum Int           @default(0)
  probability   Int           @default(0)
  unitPrice     Decimal       @default(0.00) @db.Decimal(10, 2)
  shareProfit   Decimal       @default(0.00) @db.Decimal(10, 2)
  takes         Int           @default(0)
  introduce     String        @db.Text
  htmlIntroduce String        @db.Text
  award         Decimal       @default(0.00) @db.Decimal(10, 2)
  gold          Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  File          File?         @relation(fields: [coverId], references: [id])
  OrderRecord   OrderRecord[]

  @@index([coverId], map: "Zone_coverId_fkey")
}
